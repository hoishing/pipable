{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pipable","text":"<p>pseudo pipe operation in python</p> <p> </p> <p>\ud83d\udd17 source code</p>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#create-the-pipe-object","title":"Create the Pipe Object","text":"<ul> <li>instantiate with the <code>Pipe</code> class</li> </ul> <pre><code>from pipable import Pipe\nlist_ = Pipe(list)\n\"abc\" | list_    # [\"a\", \"b\", \"c\"]\n</code></pre>"},{"location":"#create-pipe-object-like-partial","title":"Create Pipe Object Like Partial","text":"<ul> <li>turn function into Pipe by providing argument values like using the built-in <code>functools.partial</code></li> <li>preceding output will be assigned to the first argument while piping</li> </ul> <pre><code>square = Pipe(pow, exp=2)\n3 | square    # 9\n</code></pre> <p>Note that assigning value to the first argument will raise exception, as it is preserved for the preceding output.</p> <pre><code>base2 = Pipe(pow, base=2)\n3 | base2    # raise !!\n</code></pre>"},{"location":"#using-decorator","title":"Using Decorator","text":"<ul> <li>transform function to Pipe factory function with the <code>@Pipe</code> decorator</li> <li>preceding output will be assigned to the first argument</li> <li>instantiate Pipe object like creating partial by skipping the first argument</li> </ul> <pre><code># function with only one argument\n@Pipe\ndef hi(name: str) -&gt; str:\nreturn f\"hi {name}\"\n\"May\" | hi    # \"hi May\"\n# function with multiple arguments\n@Pipe\ndef power(base: int, exp: int) -&gt; int:\nreturn a ** b\n# instantiate Pipe obj by calling without the 1st argument\n2 | power(3)        # 8\n2 | power(exp=3)    # 8, better be more explicit with keyword\n# assign the 1st argument will cause exception\n2 | power(base=3)    # raise !!\n</code></pre>"},{"location":"#motivation","title":"Motivation","text":"<p>Pipe operation is a handy feature in functional programming. It allows us to:</p> <ul> <li>write clearer and more readable code</li> <li>create less variables</li> <li>easily create new functionality by chaining the output of other functions</li> </ul> <p>However it's still a missing feature in Python as of 2023. This package try to mimic pipe operation by overriding the bitwise-or operator, turn it into an infix function that take the output of previous expression as the first argument of the current function.</p> <p>There are packages, such as Pipe take the similar approach. It treats pipe as iterator and work great with iterables. However, I simply want to take preceding expression as an input argument of a function then execute it. It leads to the creation of this package.</p>"},{"location":"#faq","title":"FAQ","text":"<p>How can I assign value to the first argument?</p> <p>Assign it within a wrapper function</p> <pre><code>base2 = Pipe(lambda x: pow(2, x))\n3 | base2  # 8\n</code></pre> <p>Can I create open pipe?</p> <p><code>Pipe</code> only create closed pipe, ie. execute the function after piping with the <code>|</code> operator. You may consider other solutions such as:</p> <ul> <li>pipe, which create open pipe for iterators</li> <li>Coconut, a python variant that embrace functional programming</li> </ul> <p>Can I append the preceding output at the end of the argument list?</p> <p>Put the preceding output at the end using a wrapper function</p> <pre><code># prepend is the default behaviour\nprepend = Pipe(print, 'b', 'c')\n'a' | prepend    # 'a b c'\n# use wrapper if you need append\nappend = Pipe(lambda x: print(1, 2, x))\n3 | append    # '1 2 3'\n</code></pre>"},{"location":"#need-help","title":"Need Help?","text":"<p>Open a github issue or ping me on Twitter </p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#011-2023-02-04","title":"0.1.1 (2023-02-04)","text":""},{"location":"changelog/#new-features","title":"New Features","text":"<ul> <li>pipe operation + tests + README</li> </ul>"},{"location":"changelog/#docs","title":"Docs","text":"<ul> <li>init</li> </ul>"},{"location":"changelog/#others","title":"Others","text":"<ul> <li>automate version pump, pypi publish, github release</li> </ul>"},{"location":"contribute/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contribute/#environment-setup","title":"Environment setup","text":"<ul> <li>install poetry</li> <li>fork the repo to your github account</li> <li>clone the repo and change into the directory</li> <li>install the dependencies:</li> </ul> <pre><code>poetry install --with dev\n</code></pre> <p>Dev dependencies are installed in <code>.venv</code> folder.</p>"},{"location":"contribute/#development","title":"Development","text":"<ol> <li>start the environment with <code>poetry shell</code></li> <li>create a new branch: <code>git checkout -b branch-name</code></li> <li>edit the code and docs</li> <li>test your code with <code>pytest --doctest-modules path/to/your/files</code></li> </ol>"},{"location":"contribute/#code-formatting","title":"Code Formatting","text":"<ul> <li>run <code>black path/to/your/files</code> to auto-format the code</li> <li>or use <code>black</code> as the python auto formatter in your code editor</li> </ul>"},{"location":"contribute/#testing","title":"Testing","text":"<p>This package use both <code>doctest</code> in docstring and <code>pytest</code> to perform tests. Please test the code and fix any issue before making PR.</p>"},{"location":"contribute/#updating-docs","title":"Updating Docs","text":"<p>If you updated the docs:</p> <ul> <li>run <code>mkdocs serve</code></li> <li>visit http://localhost:8000 and check that everything looks good</li> </ul>"},{"location":"contribute/#ci-github-action","title":"CI - Github Action","text":"<p>If you are unsure about how to fix the error/warning from github action, just let the CI fail, we will help you during code review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2023 Kelvin Ng</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"reference/","title":"References","text":""},{"location":"reference/#pipable","title":"<code>pipable</code>","text":"<p>This package try to mimic pipe operation by overriding the bitwise-or operator,  turn it into an infix function that take the output of previous expression as the first argument of the current function.</p>"},{"location":"reference/#pipable.Pipe","title":"<code>Pipe</code>","text":"<p>         Bases: <code>object</code></p> <p>This class create the <code>Pipe</code> object that mimic pipe operation:</p> <ul> <li>instatiate by creating partial of existing function</li> <li>turn the bitwise-or operator <code>|</code> into an infix function that accept the output of previous expression. ie. pipe operator</li> </ul> Source code in <code>pipable/__init__.py</code> <pre><code>class Pipe(object):\n\"\"\"This class create the `Pipe` object that mimic pipe operation:\n    - instatiate by creating partial of existing function\n    - turn the bitwise-or operator `|` into an infix function that accept the output of previous expression.\n    ie. pipe operator\n    \"\"\"\ndef __init__(self, func: Callable, *args, **kwargs) -&gt; None:\n\"\"\"create pipable partial for the target func\n        Args:\n            func (Callable): func to be pipable\n            args: partial's positional args\n            kwargs: partial's keyword args\n        \"\"\"\nself.pipe = prepend_partial(func, *args, **kwargs)\ndef __ror__(self, precedent: Any):\n\"\"\"override the builit-in `|` operator, turn it into pipe\"\"\"\n# return partial(self.func, precedent)\nreturn self.pipe(precedent)\ndef __call__(self, *args, **kwargs):\n\"\"\"replace arguments of the pipable partial\"\"\"\nreturn Pipe(self.pipe.func, *args, **kwargs)\n</code></pre>"},{"location":"reference/#pipable.Pipe.__call__","title":"<code>__call__(*args, **kwargs)</code>","text":"<p>replace arguments of the pipable partial</p> Source code in <code>pipable/__init__.py</code> <pre><code>def __call__(self, *args, **kwargs):\n\"\"\"replace arguments of the pipable partial\"\"\"\nreturn Pipe(self.pipe.func, *args, **kwargs)\n</code></pre>"},{"location":"reference/#pipable.Pipe.__init__","title":"<code>__init__(func: Callable, *args, **kwargs) -&gt; None</code>","text":"<p>create pipable partial for the target func</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>func to be pipable</p> required <code>args</code> <p>partial's positional args</p> <code>()</code> <code>kwargs</code> <p>partial's keyword args</p> <code>{}</code> Source code in <code>pipable/__init__.py</code> <pre><code>def __init__(self, func: Callable, *args, **kwargs) -&gt; None:\n\"\"\"create pipable partial for the target func\n    Args:\n        func (Callable): func to be pipable\n        args: partial's positional args\n        kwargs: partial's keyword args\n    \"\"\"\nself.pipe = prepend_partial(func, *args, **kwargs)\n</code></pre>"},{"location":"reference/#pipable.Pipe.__ror__","title":"<code>__ror__(precedent: Any)</code>","text":"<p>override the builit-in <code>|</code> operator, turn it into pipe</p> Source code in <code>pipable/__init__.py</code> <pre><code>def __ror__(self, precedent: Any):\n\"\"\"override the builit-in `|` operator, turn it into pipe\"\"\"\n# return partial(self.func, precedent)\nreturn self.pipe(precedent)\n</code></pre>"},{"location":"reference/#pipable.prepend_partial","title":"<code>prepend_partial(func: Callable, /, *args, **keywords) -&gt; Callable</code>","text":"<p>partial with arguments prepend to <code>args</code></p> Notes <p>built-in <code>functools.parital</code> append arguments to <code>args</code>, see docs</p> <p>Examples:</p> <ul> <li>compare with <code>functools.partial</code> using <code>pow</code></li> </ul> <pre><code>&gt;&gt;&gt; import functools\n&gt;&gt;&gt; square_of = prepend_partial(pow, 2)\n&gt;&gt;&gt; two_power_of = functools.partial(pow, 2)\n&gt;&gt;&gt; square_of(3), two_power_of(3)\n(9, 8)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callalbe</code> <p>function to create partial, positional only</p> required <code>args</code> <code>list</code> <p>positional arguments of <code>func</code></p> <code>()</code> <code>keywords</code> <code>dict</code> <p>keyword arguments of <code>func</code></p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Callable</code> <code>Callable</code> <p>partial of <code>func</code></p> Source code in <code>pipable/__init__.py</code> <pre><code>def prepend_partial(func: Callable, /, *args, **keywords) -&gt; Callable:\n\"\"\"partial with arguments prepend to `args`\n    Notes:\n        built-in `functools.parital` append arguments to `args`, see [docs](https://docs.python.org/3/library/functools.html#functools.partial)\n    Examples:\n        - compare with `functools.partial` using `pow`\n        &gt;&gt;&gt; import functools\n        &gt;&gt;&gt; square_of = prepend_partial(pow, 2)\n        &gt;&gt;&gt; two_power_of = functools.partial(pow, 2)\n        &gt;&gt;&gt; square_of(3), two_power_of(3)\n        (9, 8)\n    Args:\n        func (Callalbe): function to create partial, positional only\n        args (list): positional arguments of `func`\n        keywords (dict): keyword arguments of `func`\n    Returns:\n        Callable: partial of `func`\n    [py-docs]: https://docs.python.org/3/library/functools.html#functools.partial\n    \"\"\"\ndef f(*fargs, **fkeywords):\ncombined_kwargs = {**keywords, **fkeywords}\n# fargs precede args\nreturn func(*fargs, *args, **combined_kwargs)\n# competible w/ functools.partial signature\nf.func = func\nf.args = args\nf.keywords = keywords\nreturn f\n</code></pre>"}]}